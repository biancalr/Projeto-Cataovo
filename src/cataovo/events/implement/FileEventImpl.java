/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cataovo.events.implement;

import cataovo.events.FileEvent;
import cataovo.exceptions.DirectoryNotValidException;
import cataovo.exceptions.ImageNotValidException;
import cataovo.exceptions.ReportNotValidException;
import cataovo.resources.fileChooser.FileFilterExtensions;
import cataovo.utils.Constants;
import cataovo.utils.enums.FileExtension;
import cataovo.wrappers.UI.FileChooserUI;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Controls the interactions with the files from outside the Application.
 *
 * @author Bianca Leopoldo Ramos
 */
public class FileEventImpl implements FileEvent {

    private static final Logger LOG = Logger.getLogger(FileEventImpl.class.getName());
    private final FileChooserUI fileChooser;

    public FileEventImpl(final String fileChooserDirHome) throws DirectoryNotValidException {
        fileChooser = new FileChooserUI(new File(fileChooserDirHome));
    }

    /**
     * Selects an event and an action based on the action commands.
     * <p>
     * The action command <strong>Open Palette</strong> opens a Open dialog
     * selection that permits to select a folder that represents a Palette, wich
     * in essence is a folder containg images of the eggs.
     * </p>
     * <p>
     * The action command <strong>Select Destination</strong> Folder opens a
     * saving dialog selection that permits to select a folder where the
     * analisys of each processing mode saves its folder. It should be used with
     * caution because each processing mode resets the saving folder.
     * </p>
     * <p>
     * The action command <strong>Select Report</strong> opens a Open dialog
     * selection where it allows to select the report generated by Manual and
     * Automatic processing mods and use them as entry to the Evaluation mode.
     * </p>
     *
     * @param actionCommand comand that defines a dialog showing actions
     * @param parent
     * @param isADirectoryOnly <code>True</code> if the selection mode is a
     * <code>DIRECTORY_ONLY</code> or <code>False</code> if the selection mode
     * is a <code>FILES_AND_DIRECTORIES</code>
     * @return
     * @throws cataovo.exceptions.DirectoryNotValidException
     * @throws cataovo.exceptions.ImageNotValidException
     * @throws java.io.FileNotFoundException
     * @throws cataovo.exceptions.ReportNotValidException
     */
    @Override
    public File onFileSelectionEvent(boolean isCurrentTabProcessing, String actionCommand, boolean isADirectoryOnly) throws DirectoryNotValidException, ImageNotValidException, FileNotFoundException, ReportNotValidException {
        if (!isCurrentTabProcessing) {
            switch (actionCommand) {
                case Constants.ITEM_ACTION_COMMAND_OPEN_PALETTE_PT_BR -> {
                    return actionCommandOpenFolder(isADirectoryOnly);
                }
                case Constants.ITEM_ACTION_COMMAND_SELECT_DESTINATION_FOLDER_PT_BR -> {
                    return actionCommandSetSavingFolder(isADirectoryOnly);
                }
                case Constants.ITEM_ACTION_COMMAND_SELECT_REPORT_PT_BR -> {
                    return actionCommandSelectReport(isADirectoryOnly);
                }
                default -> {
                    LOG.log(Level.WARNING, "Not implemented yet {0}", actionCommand);
                    return null;
                }
            }

        }
        return null;
    }

    /**
     * The behavior for the action ACTION_COMMAND_ABRIR_PASTA. Sets a Palette to
     * work with.
     *
     * @param isADirectoryOnly
     * @param parent
     * @return
     * @throws FileNotFoundException
     * @throws DirectoryNotValidException
     * @throws ImageNotValidException
     */
    private File actionCommandOpenFolder(boolean isADirectoryOnly) throws FileNotFoundException, DirectoryNotValidException, ImageNotValidException, HeadlessException {
        FileChooserUI chooser = this.fileChooser;
        chooser.resetChoosableFileFilters();
        chooser.setFileFilter(null);
        File file = chooser.dialogs(Constants.OPEN_DIALOG, isADirectoryOnly, null);
        if (file != null && file.exists()) {
            // Set the palette which represents the folder where the frames are contained
            return file;
        }
        return null;
    }

    /**
     *
     * @param isADirectoryOnly
     * @param parent
     * @return
     * @throws DirectoryNotValidException
     * @throws HeadlessException
     */
    private File actionCommandSelectReport(final boolean isADirectoryOnly) throws DirectoryNotValidException, HeadlessException, ReportNotValidException {
        FileChooserUI chooser = this.fileChooser;
        chooser.resetChoosableFileFilters();
        chooser.addChoosableFileFilter(new FileFilterExtensions(FileExtension.CSV));
        chooser.setFileFilter(new FileFilterExtensions(FileExtension.CSV));
        chooser.setExtensionType(FileExtension.CSV);
        File file = chooser.dialogs(Constants.OPEN_DIALOG, isADirectoryOnly, null);
        if (isAValidFileReportOnPalette(file)) {
            return file;
        } else {
            LOG.log(Level.WARNING, "Couldn't pass all the validations for a csv report");
            return null;
        }

    }

    private boolean isAValidFileReportOnPalette(File file) throws DirectoryNotValidException {
        return file != null && file.exists() && file.isFile()
                && file.getAbsolutePath().contains(FileExtension.CSV.getExtension());
    }

    /**
     * The behavior for the action ACTION_COMMAND_SELECIONAR_PASTA_DESTINO. Sets
     * a folder where the final report will be saved.
     *
     * @param isADirectoryOnly
     * @param parent
     * @return
     * @throws DirectoryNotValidException
     */
    private File actionCommandSetSavingFolder(final boolean isADirectoryOnly) throws DirectoryNotValidException {
        LOG.log(Level.INFO, "Setting a new saving Folder.");
        FileChooserUI chooser = this.fileChooser;
        chooser.resetChoosableFileFilters();
        chooser.setFileFilter(null);
        File file = chooser.dialogs(Constants.OPEN_DIALOG, isADirectoryOnly, null);
        if (file != null && file.exists()) {
            // Set the folder where the result will be saved.
            LOG.log(Level.INFO, "A new saving Folder {0}", file);
            return file;
        }
        return null;

    }

}
